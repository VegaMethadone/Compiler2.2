digraph G {
    node [shape=box];
  "1 | start" [shape=ellipse];
  "1 | start" -> "10 | ASM_funcSignature" [label=" L "];
  "10 | ASM_funcSignature" [shape=ellipse];
  "10 | ASM_funcSignature" -> "37 | ASM_Var" [label=" L "];
  "37 | ASM_Var" [shape=ellipse];
  "37 | ASM_Var" -> "36 | ASM_Dowhile" [label=" L "];
  "36 | ASM_Dowhile" [shape=ellipse];
  "36 | ASM_Dowhile" -> "17 | ASM_Assignment" [label=" L "];
  "17 | ASM_Assignment" [shape=ellipse];
  "17 | ASM_Assignment" -> "8 | ASM_END_Dowhile" [label=" L "];
  "8 | ASM_END_Dowhile" [shape=ellipse];
  "8 | ASM_END_Dowhile" -> "35 | ASM_If" [label=" L "];
  "35 | ASM_If" [shape=ellipse];
  "35 | ASM_If" -> "31 | ASM_Assignment" [label=" L "];
  "31 | ASM_Assignment" [shape=ellipse];
  "31 | ASM_Assignment" -> "6 | ASM_END_If" [label=" L "];
  "6 | ASM_END_If" [shape=ellipse];
  "6 | ASM_END_If" -> "5 | end" [label=" L "];
  "5 | end" [shape=ellipse];
  "31 | ASM_Assignment" -> "7 | \n\n"[shape=box];
  "7 | \n\n" [shape=box];
  "7 | \n\n" -> "8 | ASM_Write\n\n" [label=" R "];
  "8 | ASM_Write\n\n" [shape=box];
  "8 | ASM_Write\n\n" -> "9 | ASM_Ident\n\ni" [label=" L "];
  "9 | ASM_Ident\n\ni" [shape=box];
  "8 | ASM_Write\n\n" -> "10 | ASM_Value\nINT\n10" [label=" R "];
  "10 | ASM_Value\nINT\n10" [shape=box];
  "35 | ASM_If" -> "6 | ASM_END_If" [label=" R "];
  "35 | ASM_If" -> "4 | NOT_EQUAL\n\n"[shape=box];
  "4 | NOT_EQUAL\n\n" [shape=box];
  "4 | NOT_EQUAL\n\n" -> "11 | ASM_Value\nIDENTIFIER\ni" [label=" L "];
  "11 | ASM_Value\nIDENTIFIER\ni" [shape=box];
  "4 | NOT_EQUAL\n\n" -> "12 | ASM_Value\nINT\n10" [label=" R "];
  "12 | ASM_Value\nINT\n10" [shape=box];
  "8 | ASM_END_Dowhile" -> "36 | ASM_Dowhile" [label=" R "];
  "8 | ASM_END_Dowhile" -> "13 | LESS\n\n"[shape=box];
  "13 | LESS\n\n" [shape=box];
  "13 | LESS\n\n" -> "20 | ASM_Value\nIDENTIFIER\ni" [label=" L "];
  "20 | ASM_Value\nIDENTIFIER\ni" [shape=box];
  "13 | LESS\n\n" -> "21 | ASM_Value\nINT\n10" [label=" R "];
  "21 | ASM_Value\nINT\n10" [shape=box];
  "17 | ASM_Assignment" -> "14 | \n\n"[shape=box];
  "14 | \n\n" [shape=box];
  "14 | \n\n" -> "15 | ASM_Write\n\n" [label=" R "];
  "15 | ASM_Write\n\n" [shape=box];
  "15 | ASM_Write\n\n" -> "16 | ASM_Ident\n\ni" [label=" L "];
  "16 | ASM_Ident\n\ni" [shape=box];
  "15 | ASM_Write\n\n" -> "17 | PLUS\n\n" [label=" R "];
  "17 | PLUS\n\n" [shape=box];
  "17 | PLUS\n\n" -> "18 | ASM_Value\nIDENTIFIER\ni" [label=" L "];
  "18 | ASM_Value\nIDENTIFIER\ni" [shape=box];
  "17 | PLUS\n\n" -> "19 | ASM_Value\nINT\n1" [label=" R "];
  "19 | ASM_Value\nINT\n1" [shape=box];
  "37 | ASM_Var" -> "2 | ASM_INIT\n\n"[shape=box];
  "2 | ASM_INIT\n\n" [shape=box];
  "2 | ASM_INIT\n\n" -> "22 | ASM_Type\n\nint" [label=" L "];
  "22 | ASM_Type\n\nint" [shape=box];
  "2 | ASM_INIT\n\n" -> "23 | ASM_Write\n\n" [label=" R "];
  "23 | ASM_Write\n\n" [shape=box];
  "23 | ASM_Write\n\n" -> "24 | ASM_Ident\n\ni" [label=" L "];
  "24 | ASM_Ident\n\ni" [shape=box];
  "23 | ASM_Write\n\n" -> "25 | ASM_Value\nINT\n0" [label=" R "];
  "25 | ASM_Value\nINT\n0" [shape=box];
  "10 | ASM_funcSignature" -> "26 | ASM_Func\n\n"[shape=box];
  "26 | ASM_Func\n\n" [shape=box];
  "26 | ASM_Func\n\n" -> "27 | ASM_FuncDef\n\n" [label=" L "];
  "27 | ASM_FuncDef\n\n" [shape=box];
  "27 | ASM_FuncDef\n\n" -> "28 | ASM_Value\n\nvoid" [label=" L "];
  "28 | ASM_Value\n\nvoid" [shape=box];
  "27 | ASM_FuncDef\n\n" -> "29 | ASM_Ident\n\nmain" [label=" R "];
  "29 | ASM_Ident\n\nmain" [shape=box];
}
